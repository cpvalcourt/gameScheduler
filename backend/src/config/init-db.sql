-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS GAME_SCHEDULER;

-- Use the database
USE GAME_SCHEDULER;

-- Create tables if they don't exist
CREATE TABLE IF NOT EXISTS USERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    IS_VERIFIED BOOLEAN DEFAULT FALSE,
    VERIFICATION_TOKEN VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS PASSWORD_RESETS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    TOKEN VARCHAR(255) NOT NULL,
    EXPIRES_AT TIMESTAMP NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    UNIQUE KEY UNIQUE_TOKEN (TOKEN)
);

CREATE TABLE IF NOT EXISTS TEAMS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT,
    CREATED_BY INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS TEAM_MEMBERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TEAM_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    ROLE ENUM('admin', 'captain', 'player', 'snack_provider') NOT NULL DEFAULT 'player',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (TEAM_ID) REFERENCES TEAMS(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    UNIQUE KEY UNIQUE_TEAM_MEMBER (TEAM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS GAME_SERIES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT,
    TYPE ENUM('tournament', 'league', 'casual') NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS GAMES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    SERIES_ID INT NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    LOCATION VARCHAR(255) NOT NULL,
    MAX_PLAYERS INT NOT NULL,
    STATUS ENUM('scheduled', 'in_progress', 'completed', 'cancelled') NOT NULL DEFAULT 'scheduled',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (SERIES_ID) REFERENCES GAME_SERIES(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS GAME_TEAMS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GAME_ID INT NOT NULL,
    TEAM_ID INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (GAME_ID) REFERENCES GAMES(ID),
    FOREIGN KEY (TEAM_ID) REFERENCES TEAMS(ID),
    UNIQUE KEY UNIQUE_GAME_TEAM (GAME_ID, TEAM_ID)
);

CREATE TABLE IF NOT EXISTS GAME_ATTENDANCE (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GAME_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    STATUS ENUM('attending', 'declined', 'maybe') NOT NULL,
    NOTES TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (GAME_ID) REFERENCES GAMES(ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    UNIQUE KEY UNIQUE_GAME_ATTENDANCE (GAME_ID, USER_ID)
);